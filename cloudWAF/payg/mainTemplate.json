{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "3.2.1.0",
    "parameters": {
        "baseUrl": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/edwoodjrjr/f5-azure-solution-templates/develop/cloudWAF/payg",
            "metadata": {
                "description": "The base URL for marketplace deployment.",
                "artifactsBaseUrl": ""
            }
        },
        "location": {
            "type":"string",
            "metadata": {
                "description": "The location of the deployment"
            }
        },
        "solutionDeploymentName": {
            "metadata": {
                "description": "A unique name for this deployment."
            },
            "type": "string"
        },
        "adminUsername": {
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Virtual Machine."
            },
            "type": "string"
        },
        "adminPassword": {
            "metadata": {
                "description": "Password to login to the Virtual Machine."
            },
            "type": "securestring"
        },
        "licensedBandwidth": {
            "allowedValues": [
                "25m",
                "200m",
                "1g"
            ],
            "defaultValue": "200m",
            "metadata": {
                "description": "The amount of licensed bandwidth (Mbps) you want the PAYG image to use."
            },
            "type": "string"
        },
        "instanceType": {
            "type": "string",
            "defaultValue": "Standard_DS2",
            "metadata": {
                "description": "The size of the Virtual Hardware Instance."
            },
            "allowedValues": [
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_D15_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_F2",
                "Standard_F4",
                "Standard_F8",
                "Standard_F2S",
                "Standard_F4S",
                "Standard_F8S"
            ]
        },
        "imageName": {
            "allowedValues": [
                "Best"
            ],
            "defaultValue": "Best",
            "metadata": {
                "description": "F5 SKU (IMAGE) you want to deploy. 'Best' is the only option because ASM is required."
            },
            "type": "string"
        },
        "bigIpVersion": {
            "allowedValues": [
                "13.0.021",
                "12.1.24",
                "latest"
            ],
            "defaultValue": "13.0.021",
            "metadata": {
                "description": "F5 BIG-IP version you want to use."
            },
            "type": "string"
        },
        "storageAccountNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "New or Existing Storage Account"
            }
        },
        "storageAccountExistingRGName": {
            "type": "string",
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "Existing Storage Account Resoure Group name"
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "wafst",
            "metadata": {
                "description": "Unique name for the new Storage Account."
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Premium_LRS",
            "metadata": {
                "description": "Storage account type."
            },
            "allowedValues": [
                "Premium_LRS",
                "Standard_LRS"
            ]
        },
        "publicIpNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "New or Existing Public IP"
            }
        },
        "publicIpExistingRGName": {
            "type": "string",
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "Existing Virtual Network Resource Group name"
            }
        },
        "publicIpName": {
            "type": "string",
            "defaultValue": "waf-pip",
            "metadata": {
                "description": "Unique name for the Public IP used to access the Web Application Firewalls for management."
            }
        },
        "dnsLabel": {
            "defaultValue": "REQUIRED",
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine"
            },
            "type": "string"
        },
        "vnetNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "metadata": {
                "description": "New or Existing Virtual Network"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "waf-vnet",
            "metadata": {
                "description": "Specify the virtual network name."
            }
        },
        "vnetExistingRGName": {
            "type": "string",
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "Existing Virtual Network name"
            }
        },
        "vnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "Specify the virtual network address space."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "subnet1",
            "metadata": {
                "description": "Specify the virtual subnet name wher the BIG-IP will reside."
            }
        },
        "subnetAddressPrefix": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "Specify the virtual subnet address space."
            }
        },
        "privateIpAddressRangeStart": {
            "type": "string",
            "defaultValue": "0.0.0.0",
            "metadata": {
                "description": "Enter an IP address for the BIG-IP."
            }
        },
        "restrictedSrcAddress": {
            "defaultValue": "*",
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            },
            "type": "string"
        },
        "ntpServer": {
            "defaultValue": "0.pool.ntp.org",
            "metadata": {
                "description": "If you would like to change the NTP server the BIG-IP uses replace the default ntp server with your choice."
            },
            "type": "string"
        },
        "applicationProtocols": {
            "allowedValues": [
                "http",
                "https",
                "http-https",
                "https-offload"
            ],
            "defaultValue": "http-https",
            "metadata": {
                "description": "The protocol(s) used by your application."
            },
            "type": "string"
        },
        "applicationAddress": {
            "metadata": {
                "description": "The public IP address or DNS FQDN of the application that this WAF will protect."
            },
            "type": "string"
        },
        "applicationPort": {
            "defaultValue": "80",
            "metadata": {
                "description": "If you are deploying an HTTP application, the port on which your service listens for unencrypted traffic. This field is not required when deploying HTTPS only."
            },
            "type": "string"
        },
        "applicationSecurePort": {
            "defaultValue": "443",
            "metadata": {
                "description": "If you are deploying an HTTPS application, the port on which your service listens for encrypted traffic. This field is not required when deploying HTTP only."
            },
            "type": "string"
        },
        "applicationType": {
            "allowedValues": [
                "Windows",
                "Linux"
            ],
            "defaultValue": "Linux",
            "metadata": {
                "description": "Is your application running on a Linux OS or a Windows OS?"
            },
            "type": "string"
        },
        "applicationServiceFqdn": {
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "If you are deploying in front of an Azure App Service, the FQDN of the public application."
            },
            "type": "string"
        },
        "blockingLevel": {
            "allowedValues": [
                "low",
                "medium",
                "high",
                "off",
                "custom"
            ],
            "defaultValue": "medium",
            "metadata": {
                "description": "Select how aggressive you want the blocking level of this WAF.  Remember that the more aggressive the blocking level, the more potential there is for false-positives that the WAF might detect. Select Custom to specify your own security policy."
            },
            "type": "string"
        },
        "customPolicy": {
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "Specify the publicly available URL of a custom ASM security policy in XML format. This policy will be applied in place of the standard High/Medium/Low policy."
            },
            "type": "string"
        },
        "sslCert": {
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "The SSL certificate .pfx file corresponding to public facing virtual server."
            },
            "type": "string"
        },
        "sslPswd": {
            "defaultValue": "NOT_SPECIFIED",
            "metadata": {
                "description": "The SSL certificate .pfx password corresponding to the certificate you entered."
            },
            "type": "securestring"
        },
        "vmScaleSetMinCount": {
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "defaultValue": 2,
            "metadata": {
                "description": "The minimum (and default) number of BIG-IP VEs that will be deployed into the VM Scale Set."
            },
            "type": "int"
        },
        "vmScaleSetMaxCount": {
            "allowedValues": [
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "defaultValue": 4,
            "metadata": {
                "description": "The maximum number of BIG-IP VEs that can be deployed into the VM Scale Set."
            },
            "type": "int"
        },
        "scaleOutThroughput": {
            "allowedValues": [
                50,
                55,
                60,
                65,
                70,
                75,
                80,
                85,
                90,
                95
            ],
            "defaultValue": 90,
            "metadata": {
                "description": "The percentage of 'Network Out' throughput that triggers a Scale Out event.  This is factored as a percentage of the F5 PAYG image bandwidth (Mbps) size you choose."
            },
            "type": "int"
        },
        "scaleInThroughput": {
            "allowedValues": [
                5,
                10,
                15,
                20,
                25,
                30,
                35,
                40,
                45
            ],
            "defaultValue": 10,
            "metadata": {
                "description": "The percentage of 'Network Out' throughput that triggers a Scale In event.  This is factored as a percentage of the F5 PAYG image bandwidth (Mbps) size you choose."
            },
            "type": "int"
        },
        "scaleTimeWindow": {
            "allowedValues": [
                5,
                10,
                15,
                30
            ],
            "defaultValue": 10,
            "metadata": {
                "description": "The time window required to trigger a scale event (in and out). This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping)."
            },
            "type": "int"
        },
        "tenantId": {
            "metadata": {
                "description": "Your Azure service principal application tenant ID."
            },
            "type": "string"
        },
        "clientId": {
            "metadata": {
                "description": "Your Azure service principal application client ID."
            },
            "type": "string"
        },
        "servicePrincipalSecret": {
            "metadata": {
                "description": "Your Azure service principal application secret."
            },
            "type": "securestring"
        }
    },
    "variables": {
        "subscriptionID": "[subscription().subscriptionId]",
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            },
            "2": {
                "Port": "443"
            },
            "3": {
                "Port": "443"
            },
            "4": {
                "Port": "443"
            },
            "5": {
                "Port": "443"
            },
            "6": {
                "Port": "443"
            }
        },
        "bigIpVersionPortMap": {
            "12.1.24": {
                "Port": 443
            },
            "13.0.021": {
                "Port": 8443
            },
            "443": {
                "Port": 443
            },
            "latest": {
                "Port": 8443
            }
        },
        "apiVersionCompute": "2016-04-30-preview",
        "apiVersionNetwork": "2016-06-01",
        "apiVersionStorage": "2015-06-15",
        "apiVersionInsights": "2015-04-01",
        "apiVersionTemplate": "2015-01-01",
        "singleQuote": "'",
        "f5Tag": "82e08e16-fc62-4bf0-8916-e1c02dc871cd",
        "f5TemplateTag": "cloud_waf",
        "f5CloudLibsTag": "v3.1.1",
        "f5CloudLibsAzureTag": "v1.2.0",
        "f5NetworksTag": "v3.2.1.0",
        "f5CloudIappsTag": "v1.0.0",
        "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 6db9649698cb7af311defc89ccea1c0208d3b6cfc73b7bab5b52ab9d5074677ec9a1559a5e54e7325aa334a02d26d76528b5ead08e1654dcbf77c94192156468\n            set hashes(f5-cloud-libs-aws.tar.gz) 6a2cb0d101c918d37aa552528a45f14615ab50fe8a024c2040cf686a4ec1ce316a75930d936de3dc341a1a5f9cec14e9979f0f9cb601f51dba528929de607e6e\n            set hashes(f5-cloud-libs-azure.tar.gz) a4ff4a9af058ce6058159531fd7bca07eb8808cdd1b1e13de0e1324ec7e4692211991ecaa58dc36021c6c88c7783837d480584393753c3dfc2fddf623781e3a9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 4c125f7cbc4d701cf50f03de479ebe99a08c2b2c3fa6aae3e229eb3f0bba98bb513d630368229c98e7c5c907e6a3168ece2f8f576267514bad4f6730ea14d454\n            set hashes(f5.policy_creator.tmpl) 54d265e0a573d3ae99864adf4e054b293644e48a54de1e19e8a6826aa32ab03bd04c7255fd9c980c3673e9cd326b0ced513665a91367add1866875e5ef3c4e3a\n            set hashes(f5.service_discovery.tmpl) 306170ab4ec2494ed290406be37ab32af57ed59c9d614e9a86958375b7719335e6c73831fdba6bdcfb552c40227f5773dc719f2b7d6ff7c0a046180a34beb162\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature g06yXetqmFE8eLjmTqvFlI0BH23SEk5roJPzb6eHWMaf41SUjPiEacUkW6rLv3qB/mLKPJrI6QqDhloU4m0zdJndl4w18CMDtiozCUSNcapAf36huJ1VJQfc3KzIzdDPld7jgSqXa+hlA0KBtjkevjzeCKFsaKSg4wkoGUuObWJTWN5OimHsJsOxnLO3S1DpBmab0zgVy9+jvQQpg0DgKdsp2DGbVwOV9iS+lepmaBk/eXaTic2hAEqGMEi61fwzaoYU3jZwGytOEgMeK94GIp3vp3r324Ck1NrRCL1LunwbDcsZkMlvxRX9k9Y7DkDwfRsp/e7Tz11FjCOqRRtGGg==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]",
        "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\nscript_loc=\"/var/lib/waagent/custom-script/download/0/\"\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz ${script_loc}f5.service_discovery.tmpl ${config_loc}f5-cloud-libs-azure.tar.gz ${script_loc}deploy_waf.sh ${script_loc}f5.http.v1.2.0rc7.tmpl ${script_loc}f5.policy_creator.tmpl ${script_loc}asm-policy.tar.gz\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/node_modules\ntar xvfz /config/cloud/f5-cloud-libs-azure.tar.gz -C /config/cloud/node_modules/f5-cloud-libs/node_modules\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]",
        "dnsLabel": "[toLower(parameters('dnsLabel'))]",
        "imageNameToLower": "[toLower(parameters('imageName'))]",
        "skuToUse": "[concat('f5-bigip-virtual-edition-', parameters('licensedBandwidth'), '-', variables('imageNameToLower'),'-hourly')]",
        "offerToUse": "f5-big-ip-hourly",
        "publicIpRGArray": {
            "existing": "[parameters('publicIpExistingRGName')]",
            "new": "[resourceGroup().name]"
        },
        "publicIpRG": "[variables('publicIpRGArray')[parameters('publicIpNewOrExisting')]]",
        "publicIpID": "[resourceId(variables('publicIpRG'),'Microsoft.Network/publicIPAddresses',parameters('publicIpName'))]",
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['1'].Port]",
        "bigIpMgmtPort": 8443,
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]",
        "storageAccountRGArray": {
            "existing": "[parameters('storageAccountExistingRGName')]",
            "new": "[resourceGroup().name]"
        },
        "storageAccountRG": "[variables('storageAccountRGArray')[parameters('storageAccountNewOrExisting')]]",
        "diagStorageAccountName": "[concat(uniqueString(resourceGroup().id, deployment().name), 'data000')]",
        "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]",
        "vnetTemplateLink": "[concat(parameters('baseUrl'), '/', parameters('vnetNewOrExisting'),'Vnet.json')]",
        "loadBalancerName": "[concat(variables('dnsLabel'),'-alb')]",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
        "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
        "vmssName": "[concat(parameters('dnsLabel'),'-vmss')]",
        "25m": 26214400,
        "200m": 209715200,
        "1g": 1073741824,
        "scaleOutCalc": "[mul(variables(parameters('licensedBandwidth')), parameters('scaleOutThroughput'))]",
        "scaleInCalc": "[mul(variables(parameters('licensedBandwidth')), parameters('scaleInThroughput'))]",
        "scaleOutNetworkBits": "[div(variables('scaleOutCalc'), 100)]",
        "scaleInNetworkBits": "[div(variables('scaleInCalc'), 100)]",
        "scaleOutNetworkBytes": "[div(variables('scaleOutNetworkBits'), 8)]",
        "scaleInNetworkBytes": "[div(variables('scaleInNetworkBits'), 8)]",
        "timeWindow": "[concat('PT', parameters('scaleTimeWindow'), 'M')]",
        "lbTcpProbeNameHttp": "tcp_probe_http",
        "lbTcpProbeIdHttp": "[concat(variables('lbID'),'/probes/',variables('lbTcpProbeNameHttp'))]",
        "lbTcpProbeNameHttps": "tcp_probe_https",
        "lbTcpProbeIdHttps": "[concat(variables('lbID'),'/probes/',variables('lbTcpProbeNameHttps'))]",
        "httpBackendPort": 880,
        "httpsBackendPort": 8445,
        "commandArgs": "[concat('-m ', parameters('applicationProtocols'), ' -d ', parameters('solutionDeploymentName'), ' -n ', parameters('applicationAddress'), ' -j 880 -k 8445 -h ', parameters('applicationPort'), ' -s ', parameters('applicationSecurePort'), ' -t ', toLower(parameters('applicationType')), ' -l ', toLower(parameters('blockingLevel')), ' -a ', parameters('customPolicy'), ' -c ', parameters('sslCert'), ' -r ', parameters('sslPswd'), ' -o ', parameters('applicationServiceFqdn'), ' -u ', parameters('adminUsername'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "condition": "[equals(parameters('publicIpNewOrExisting'),'new')]",
            "name": "[parameters('publicIpName')]",
            "location": "[parameters('location')]",
            "tags": {
                "f5": "[variables('f5Tag')]",
                "f5Template": "[variables('f5TemplateTag')]"
            },
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsLabel')]"
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "location": "[parameters('location')]",
            "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[variables('bigIpMgmtPort')]",
                            "direction": "Inbound",
                            "priority": 101,
                            "protocol": "TCP",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "mgmt_allow_ssh",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 102,
                            "protocol": "TCP",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "app_allow_http",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[variables('httpBackendPort')]",
                            "direction": "Inbound",
                            "priority": 110,
                            "protocol": "TCP",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "app_allow_https",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[variables('httpsBackendPort')]",
                            "direction": "Inbound",
                            "priority": 111,
                            "protocol": "TCP",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            },
            "tags": {
                "f5": "[variables('f5Tag')]",
                "f5Template": "[variables('f5TemplateTag')]"
            },
            "type": "Microsoft.Network/networkSecurityGroups"
        },
        {
            "apiVersion": "[variables('apiVersionTemplate')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('dnsLabel'), '-mgmt-nsg')]"
            ],
            "name": "linkedVnetTemplate",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "[variables('vnetTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": { "value": "[parameters('location')]" },
                    "apiVersionNetwork": { "value": "[variables('apiVersionNetwork')]" },
                    "vnetName": { "value": "[parameters('vnetName')]" },
                    "vnetAddressPrefix": { "value": "[parameters('vnetAddressPrefix')]" },
                    "subnetName": { "value": "[parameters('subnetName')]" },
                    "subnetAddressPrefix": { "value": "[parameters('subnetAddressPrefix')]" },
                    "vnetExistingRGName": { "value": "[parameters('vnetExistingRGName')]" },
                    "nsgID": { "value": "[variables('nsgID')]" }
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersionNetwork')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('publicIpName'))]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('loadBalancerName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIpID')]"
                            }
                        }
                    }
                ],
                "inboundNatPools": [
                    {
                        "name": "sshnatpool",
                        "properties": {
                            "backendPort": 22,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "frontendPortRangeStart": 50001,
                            "frontendPortRangeEnd": 50100,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "mgmtnatpool",
                        "properties": {
                            "backendPort": "[variables('bigIpMgmtPort')]",
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "frontendPortRangeStart": 50101,
                            "frontendPortRangeEnd": 50200,
                            "protocol": "tcp"
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "Name": "app-http",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "backendPort": "[variables('httpBackendPort')]",
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": "[parameters('applicationPort')]",
                            "idleTimeoutInMinutes": 15,
                            "probe": {
                                "id": "[variables('lbTcpProbeIdHttp')]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "Name": "app-https",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "backendPort": "[variables('httpsBackendPort')]",
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": "[parameters('applicationSecurePort')]",
                            "idleTimeoutInMinutes": 15,
                            "probe": {
                                "id": "[variables('lbTcpProbeIdHttps')]"
                            },
                            "protocol": "Tcp"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('lbTcpProbeNameHttp')]",
                        "properties": {
                            "intervalInSeconds": 15,
                            "numberOfProbes": 3,
                            "port": "[variables('httpBackendPort')]",
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[variables('lbTcpProbeNameHttps')]",
                        "properties": {
                            "intervalInSeconds": 15,
                            "numberOfProbes": 3,
                            "port": "[variables('httpsBackendPort')]",
                            "protocol": "Tcp"
                        }
                    }
                ]
            },
            "tags": {
                "f5": "[variables('f5Tag')]",
                "f5Template": "[variables('f5TemplateTag')]"
            },
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "name": "[variables('diagStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "apiVersion": "[variables('apiVersionStorage')]",
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "name": "[parameters('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "condition": "[equals(parameters('storageAccountNewOrExisting'),'new')]",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "apiVersion": "[variables('apiVersionStorage')]",
            "properties": {
                "accountType": "[parameters('storageAccountType')]"
            }
        },
        {
            "apiVersion": "[variables('apiVersionCompute')]",
            "dependsOn": [
                "linkedVnetTemplate",
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
            ],
            "location": "[parameters('location')]",
            "name": "[variables('vmssName')]",
            "plan": {
                "name": "[variables('skuToUse')]",
                "product": "[variables('offerToUse')]",
                "publisher": "f5-networks"
            },
            "properties": {
                "overprovision": "false",
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "main",
                                "properties": {
                                    "protectedSettings": {
                                        "commandToExecute": "[concat('mkdir -p /config/cloud/node_modules; AZURE_CREDENTIALS_FILE=/config/cloud/azCredentials; BIG_IP_CREDENTIALS_FILE=/config/cloud/passwd; /usr/bin/install -m 400 /dev/null $AZURE_CREDENTIALS_FILE; /usr/bin/install -m 400 /dev/null $BIG_IP_CREDENTIALS_FILE; echo ', variables('singleQuote'), parameters('adminPassword'), variables('singleQuote'), ' > $BIG_IP_CREDENTIALS_FILE; echo ', variables('singleQuote'), '{\"clientId\": \"', parameters('clientId'), '\", \"tenantId\": \"', parameters('tenantId'), '\", \"secret\": \"', parameters('servicePrincipalSecret'), '\", \"subscriptionId\": \"', variables('subscriptionID'), '\", \"storageAccount\": \"', variables('diagStorageAccountName'), '\", \"storageKey\": \"', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccountName')), variables('apiVersionStorage')).key1, '\"}', variables('singleQuote'), ' > $AZURE_CREDENTIALS_FILE; cp f5-cloud-libs*.tar.gz* /config/cloud; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; bash /config/installCloudLibs.sh; bash /config/cloud/node_modules/f5-cloud-libs/node_modules/f5-cloud-libs-azure/scripts/autoscalewaf.sh --resourceGroup ', resourceGroup().name, ' --vmssName ', variables('vmssName'), ' --userName ', parameters('adminUsername'), ' --password $BIG_IP_CREDENTIALS_FILE --azureSecretFile $AZURE_CREDENTIALS_FILE --managementPort ', variables('bigIpMgmtPort'), ' --ntpServer ', parameters('ntpServer'), ' --timeZone UTC --wafScriptArgs ', variables('singleQuote'), variables('commandArgs'), variables('singleQuote'), '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; else exit 1; fi')]"
                                    },
                                    "publisher": "Microsoft.Azure.Extensions",
                                    "settings": {
                                        "fileUris": [
                                            "[concat(parameters('baseUrl'), '/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
                                            "[concat(parameters('baseUrl'), '/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]",
                                            "[concat(parameters('baseUrl'), '/f5-cloud-libs-azure/', variables('f5CloudLibsAzureTag'), '/dist/f5-cloud-libs-azure.tar.gz')]",
                                            "[concat(parameters('baseUrl'), '/deploy_waf.sh')]",
                                            "[concat(parameters('baseUrl'), '/f5.http.v1.2.0rc7.tmpl')]",
                                            "[concat(parameters('baseUrl'), '/f5.policy_creator.tmpl')]",
                                            "[concat(parameters('baseUrl'), '/asm-policy.tar.gz')]"
                                        ]
                                    },
                                    "type": "CustomScript",
                                    "typeHandlerVersion": "2.0"
                                }
                            }
                        ]
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "nic1",
                                "properties": {
                                    "ipConfigurations": [
                                        {
                                            "name": "ipconfig1",
                                            "properties": {
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
                                                    }
                                                ],
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/sshnatpool')]"
                                                    },
                                                    {
                                                        "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/mgmtnatpool')]"
                                                    }
                                                ],
                                                "subnet": {
                                                    "id": "[concat(reference('linkedVnetTemplate').outputs.vnetID.value,'/subnets/',parameters('subnetName'))]"
                                                }
                                            }
                                        }
                                    ],
                                    "primary": "true"
                                }
                            }
                        ]
                    },
                    "osProfile": {
                        "adminPassword": "[parameters('adminPassword')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "computerNamePrefix": "[variables('vmssName')]"
                    },
                    "storageProfile": {
                        "imageReference": {
                            "offer": "[variables('offerToUse')]",
                            "publisher": "f5-networks",
                            "sku": "[variables('skuToUse')]",
                            "version": "[parameters('bigIpVersion')]"
                        },
                        "osDisk": {
                            "caching": "ReadOnly",
                            "createOption": "FromImage",
                            "name": "vmssosdisk",
                            "vhdContainers": [
                                "[concat('https://', parameters('storageAccountName'), '.blob.core.windows.net/vmss1')]"
                            ]
                        }
                    }
                }
            },
            "sku": {
                "capacity": "[parameters('vmScaleSetMinCount')]",
                "name": "[parameters('instanceType')]",
                "tier": "Standard"
            },
            "tags": {
                "f5": "[variables('f5Tag')]",
                "f5Template": "[variables('f5TemplateTag')]"
            },
            "type": "Microsoft.Compute/virtualMachineScaleSets"
        },
        {
            "apiVersion": "[variables('apiVersionInsights')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
            ],
            "location": "[parameters('location')]",
            "name": "autoscaleconfig",
            "properties": {
                "enabled": true,
                "name": "autoscaleconfig",
                "profiles": [
                    {
                        "capacity": {
                            "default": "[parameters('vmScaleSetMinCount')]",
                            "maximum": "[parameters('vmScaleSetMaxCount')]",
                            "minimum": "[parameters('vmScaleSetMinCount')]"
                        },
                        "name": "Profile1",
                        "notifications": [
                            {
                                "email": {
                                    "customEmails": "",
                                    "sendToSubscriptionAdministrator": false,
                                    "sendToSubscriptionCoAdministrators": false
                                },
                                "operation": "Scale"
                            }
                        ],
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "Network Out",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]",
                                    "operator": "GreaterThan",
                                    "statistic": "Average",
                                    "threshold": "[variables('scaleOutNetworkBytes')]",
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "[variables('timeWindow')]"
                                },
                                "scaleAction": {
                                    "cooldown": "PT1M",
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "Network Out",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]",
                                    "operator": "LessThan",
                                    "statistic": "Average",
                                    "threshold": "[variables('scaleInNetworkBytes')]",
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "[variables('timeWindow')]"
                                },
                                "scaleAction": {
                                    "cooldown": "PT1M",
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            }
                        ]
                    }
                ],
                "targetResourceUri": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
            },
            "type": "Microsoft.Insights/autoscaleSettings"
        }
    ],
    "outputs": {
        "GUI-URL": {
            "type": "string",
            "value": "[concat('https://',reference(variables('publicIpID')).dnsSettings.fqdn,':50101', ' - 50200')]"
        },
        "SSH-URL": {
            "type": "string",
            "value": "[concat(reference(variables('publicIpID')).dnsSettings.fqdn,' ',50001, ' - 50100')]"
        }
    }
}
